{"version":3,"sources":["SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVis.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","className","map","value","idx","key","style","height","backgroundColor","class","onClick","resetArray","mergeSort","testAlgorithms","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","javaSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","React","Component","min","max","random","arr1","arr2","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ce204ff.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","import React from 'react';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVis.css';\n\nconst ANIMATION_SPEED_MS = 2;\n\nconst NUMBER_OF_ARRAY_BARS = 310;\n\nconst PRIMARY_COLOR = 'turquoise';\n\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) \n    {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    \n\n    render() \n    { \n        const {array} = this.state;\n\n        return (\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div className=\"array-bar\" \n                    key={idx}\n                    style={{\n                    height: `${value}px`,\n                    backgroundColor: PRIMARY_COLOR}}></div>\n                   \n                ))}\n             \n                <button class=\"button-box\" onClick = {() => this.resetArray()}>Generate New Array</button>\n                <button class=\"button-box\" onClick = {() => this.mergeSort()}>Merge Sort</button>\n                <button class=\"button-box\" onClick = {() => this.testAlgorithms()}>Test Sorting Algorithms</button>\n                    \n\n            </div>\n            \n        )   \n    }\n\n    \n    componentDidMount() \n    {\n        this.resetArray();\n    }\n\n    resetArray() \n    {\n        const array = []\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++)\n        {\n            array.push(randomIntFromInterval(5, 500));\n        }\n        this.setState({array});\n    }\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n      }\n\n    testAlgorithms()\n    {\n        for(let i = 0; i < 100; i++)\n        {\n            const array = [];\n            const length = randomIntFromInterval(1, 1000);\n            for(let i = 0; i < length; i++){\n                array.push(randomIntFromInterval(-1000, 1000));\n            }\n            const javaSortedArray = array.slice().sort((a, b) => a - b);\n            const mergeSortedArray = getMergeSortAnimations(array.slice());\n            console.log(arraysAreEqual(javaSortedArray, mergeSortedArray));\n        }\n    }\n    \n}\n\nfunction randomIntFromInterval(min, max) \n{\n    return Math.floor(Math.random() *  (max - min +1) + min);\n}\n\nfunction arraysAreEqual(arr1, arr2)\n{\n    if(arr1.length !== arr2.length) return false;\n    for(let i = 0; i < arr1.length; i++)\n    {\n        if(arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVis';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}