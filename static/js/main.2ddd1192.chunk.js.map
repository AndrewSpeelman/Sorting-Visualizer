{"version":3,"sources":["SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVis.jsx","App.js","serviceWorker.js","index.js"],"names":["mergeSort","array","length","mid","Math","floor","firstHalf","slice","secondHalf","sortedArr","i","j","push","SortingVisualizer","props","state","javaSortedArray","this","sort","a","b","myArray","sortingAlgorithms","console","log","arraysAreEqual","randomIntFromInterval","mergeSortedArray","className","map","value","idx","key","style","height","class","onClick","resetArray","testAlgorithms","setState","React","Component","min","max","random","arr1","arr2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAAaA,EAAY,SAAZA,EAAYC,GACrB,GAAoB,IAAjBA,EAAMC,OAAc,OAAOD,EAO9B,IANA,IAAME,EAAMC,KAAKC,MAAMJ,EAAMC,OAAS,GAChCI,EAAYN,EAAUC,EAAMM,MAAM,EAAGJ,IACrCK,EAAaR,EAAUC,EAAMM,MAAMJ,IACnCM,EAAY,GACdC,EAAI,EACJC,EAAI,EACFD,EAAIJ,EAAUJ,QAAUS,EAAIH,EAAWN,QAEtCI,EAAUI,GAAKF,EAAWG,GAEzBF,EAAUG,KAAKN,EAAUI,MAIzBD,EAAUG,KAAKJ,EAAWG,MAGlC,KAAMD,EAAIJ,EAAUJ,QAAQO,EAAUG,KAAKN,EAAUI,MACrD,KAAMC,EAAIH,EAAWN,QAAQO,EAAUG,KAAKJ,EAAWG,MACvD,OAAOF,GCjBUI,G,kBACjB,WAAYC,GACX,IAAD,8BACI,4CAAMA,KAEDC,MAAQ,CACTd,MAAO,IAJf,E,yEAUI,IAAMe,EAAkBC,KAAKF,MAAMd,MAClCM,QACAW,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACdC,EAAUC,EAA4BL,KAAKF,MAAMd,OAEvDsB,QAAQC,IAAIC,EAAeT,EAAiBK,M,uCAM5C,IAAI,IAAIX,EAAI,EAAGA,EAAI,IAAKA,IACxB,CAGI,IAFA,IAAMT,EAAQ,GACRC,EAASwB,EAAsB,EAAG,KAChChB,EAAI,EAAGA,EAAIR,EAAQQ,IACvBT,EAAMW,KAAKc,GAAuB,IAAM,MAE5C,IAAMV,EAAkBf,EAAMM,QAAQW,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACnDO,EAAmBL,EAA4BrB,EAAMM,SAC3DgB,QAAQC,IAAIC,EAAeT,EAAiBW,O,+BAKnD,IAAD,OACW1B,EAASgB,KAAKF,MAAdd,MAEP,OACI,yBAAK2B,UAAU,mBACV3B,EAAM4B,KAAI,SAACC,EAAOC,GAAR,OACP,yBAAKH,UAAU,YACfI,IAAKD,EACLE,MAAO,CAACC,OAAO,GAAD,OAAKJ,EAAL,YAIlB,4BAAQK,MAAM,aAAaC,QAAW,kBAAM,EAAKC,eAAjD,sBACA,4BAAQF,MAAM,aAAaC,QAAW,kBAAM,EAAKpC,cAAjD,cACA,4BAAQmC,MAAM,aAAaC,QAAW,kBAAM,EAAKE,mBAAjD,8B,0CAWRrB,KAAKoB,e,mCAML,IADA,IAAMpC,EAAQ,GACNS,EAAI,EAAGA,EAAI,GAAIA,IAEnBT,EAAMW,KAAKc,EAAsB,EAAG,MAExCT,KAAKsB,SAAS,CAACtC,c,GAxEwBuC,IAAMC,YA8ErD,SAASf,EAAsBgB,EAAKC,GAEhC,OAAOvC,KAAKC,MAAMD,KAAKwC,UAAaD,EAAMD,EAAK,GAAKA,GAGxD,SAASjB,EAAeoB,EAAMC,GAE1B,GAAGD,EAAK3C,SAAW4C,EAAK5C,OAAQ,OAAO,EACvC,IAAI,IAAIQ,EAAI,EAAGA,EAAImC,EAAK3C,OAAQQ,IAE5B,GAAGmC,EAAKnC,KAAOoC,EAAKpC,GAAI,OAAO,EAEnC,OAAO,E,MClFIqC,MARf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,QCKcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2ddd1192.chunk.js","sourcesContent":["export const mergeSort = array => {\n    if(array.length === 1) return array;\n    const mid = Math.floor(array.length / 2);\n    const firstHalf = mergeSort(array.slice(0, mid));\n    const secondHalf = mergeSort(array.slice(mid));\n    const sortedArr = [];\n    let i = 0,\n        j = 0;\n    while(i < firstHalf.length && j < secondHalf.length)\n    {\n        if(firstHalf[i] < secondHalf[j])\n        {\n            sortedArr.push(firstHalf[i++]);\n        }\n        else\n        {\n            sortedArr.push(secondHalf[j++]);\n        }\n    }\n    while(i < firstHalf.length) sortedArr.push(firstHalf[i++]);\n    while(j < secondHalf.length) sortedArr.push(secondHalf[j++]);\n    return sortedArr;\n}","import React from 'react';\nimport * as sortingAlgorithms from '../SortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVis.css';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) \n    {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    mergeSort() \n    {\n        const javaSortedArray = this.state.array\n        .slice()\n        .sort((a, b) => a - b);\n        const myArray = sortingAlgorithms.mergeSort(this.state.array);\n\n        console.log(arraysAreEqual(javaSortedArray, myArray))\n\n    }\n\n    testAlgorithms()\n    {\n        for(let i = 0; i < 100; i++)\n        {\n            const array = [];\n            const length = randomIntFromInterval(1, 1000);\n            for(let i = 0; i < length; i++){\n                array.push(randomIntFromInterval(-1000, 1000));\n            }\n            const javaSortedArray = array.slice().sort((a, b) => a - b);\n            const mergeSortedArray = sortingAlgorithms.mergeSort(array.slice());\n            console.log(arraysAreEqual(javaSortedArray, mergeSortedArray));\n        }\n    }\n\n    render() \n    { \n        const {array} = this.state;\n\n        return (\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div className=\"array-bar\" \n                    key={idx}\n                    style={{height: `${value}px`}}>    \n                    </div>\n                ))}\n             \n                <button class=\"button-box\" onClick = {() => this.resetArray()}>Generate New Array</button>\n                <button class=\"button-box\" onClick = {() => this.mergeSort()}>Merge Sort</button>\n                <button class=\"button-box\" onClick = {() => this.testAlgorithms()}>Test Sorting Algorithms</button>\n                    \n\n            </div>\n            \n        )   \n    }\n\n    \n    componentDidMount() \n    {\n        this.resetArray();\n    }\n\n    resetArray() \n    {\n        const array = []\n        for(let i = 0; i < 50; i++)\n        {\n            array.push(randomIntFromInterval(5, 500));\n        }\n        this.setState({array});\n    }\n\n    \n}\n\nfunction randomIntFromInterval(min, max) \n{\n    return Math.floor(Math.random() *  (max - min +1) + min);\n}\n\nfunction arraysAreEqual(arr1, arr2)\n{\n    if(arr1.length !== arr2.length) return false;\n    for(let i = 0; i < arr1.length; i++)\n    {\n        if(arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVis';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}